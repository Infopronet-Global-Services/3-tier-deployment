name: 3-Tier DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/backend
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frontend

jobs:
  frontend-compilation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
    - name: Frontend Compilation Check
      run: |
        cd client
        find . -name "*.js" -exec node --check {} +

  backend-compilation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
    - name: Backend Compilation Check
      run: |
        cd api
        find . -name "*.js" -exec node --check {} +

  gitleaks-scan:
    runs-on: ubuntu-latest
    needs: [frontend-compilation, backend-compilation]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: GitLeaks Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  sonarqube-analysis:
    runs-on: ubuntu-latest
    needs: gitleaks-scan
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.3.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        projectBaseDir: .
        args: >
          -Dsonar.projectKey=NodeJS-Project
          -Dsonar.projectName=NodeJS-Project

  quality-gate-check:
    runs-on: ubuntu-latest
    needs: sonarqube-analysis
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: SonarQube Quality Gate Check
      run: |
        echo "Quality Gate Check: Verifying SonarQube analysis results..."
        # Simple quality gate - can be enhanced with actual API calls
        curl -u ${{ secrets.SONAR_TOKEN }}: \
          "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=NodeJS-Project" \
          | grep -q '"status":"OK"' && echo "✅ Quality Gate PASSED" || echo "❌ Quality Gate FAILED"

  trivy-fs-scan:
    runs-on: ubuntu-latest
    needs: sonarqube-analysis
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        output: 'fs-report.html'
    - name: Upload Trivy scan results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-fs-report
        path: fs-report.html

  build-tag-push-backend:
    runs-on: ubuntu-latest
    needs: trivy-fs-scan
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: true
        tags: ${{ env.BACKEND_IMAGE }}:latest,${{ env.BACKEND_IMAGE }}:${{ github.sha }}

  build-tag-push-frontend:
    runs-on: ubuntu-latest
    needs: trivy-fs-scan
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        push: true
        tags: ${{ env.FRONTEND_IMAGE }}:latest,${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

  trivy-image-scan:
    runs-on: ubuntu-latest
    needs: [build-tag-push-backend, build-tag-push-frontend]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Run Trivy scan on Backend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.BACKEND_IMAGE }}:latest
        format: 'table'
        output: 'backend-image-report.html'
    - name: Run Trivy scan on Frontend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.FRONTEND_IMAGE }}:latest
        format: 'table'
        output: 'frontend-image-report.html'
    - name: Upload Trivy image scan results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-image-reports
        path: |
          backend-image-report.html
          frontend-image-report.html

  deploy-with-argocd-monitoring:
    runs-on: ubuntu-latest
    needs: trivy-image-scan
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name uche --region eu-north-1
        
    - name: Update GitOps values
      run: |
        # Update image tags in GitOps values file for tracking
        sed -i "s/tag: .*/tag: ${{ github.sha }}/g" gitops/environments/prod/values.yaml
        sed -i "s/dockerUsername: .*/dockerUsername: ${{ secrets.DOCKER_USERNAME }}/g" gitops/environments/prod/values.yaml
        
    - name: Deploy to Production with Helm
      run: |
        # Deploy using Helm (ArgoCD will monitor for drift)
        helm upgrade --install user-management-app ./helm/user-management-app \
          --namespace prod \
          --set global.dockerUsername=${{ secrets.DOCKER_USERNAME }} \
          --set backend.image.tag=${{ github.sha }} \
          --set frontend.image.tag=${{ github.sha }} \
          --set storage.storageClass=null \
          --wait \
          --timeout=10m
        
    - name: Commit GitOps tracking
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add gitops/environments/prod/values.yaml
        git commit -m "Track deployment: ${{ github.sha }}" || exit 0
        git push
        
    - name: Verify Deployment
      run: |
        kubectl rollout status deployment/mysql -n prod --timeout=300s
        kubectl rollout status deployment/backend -n prod --timeout=300s
        kubectl rollout status deployment/frontend -n prod --timeout=300s
        kubectl get pods,svc,ingress -n prod
        echo "✅ Deployment complete with ArgoCD monitoring!"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-with-argocd-monitoring]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set notification status
      id: status
      run: |
        if [[ "${{ needs.deploy-with-argocd-monitoring.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "color=good" >> $GITHUB_OUTPUT
          echo "emoji=:white_check_mark:" >> $GITHUB_OUTPUT
          echo "message=Deployment completed with ArgoCD monitoring enabled!" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "color=danger" >> $GITHUB_OUTPUT
          echo "emoji=:x:" >> $GITHUB_OUTPUT
          echo "message=Deployment with ArgoCD monitoring failed!" >> $GITHUB_OUTPUT
        fi
        
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.status.outputs.status }}
        channel: '#devops'
        text: |
          ${{ steps.status.outputs.emoji }} **DevSecOps Pipeline ${{ steps.status.outputs.status }}**
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Author:** ${{ github.actor }}
          **Message:** ${{ steps.status.outputs.message }}
          
          **Application:** https://app.mylearncloud.shop
          **Grafana:** https://grafana.mylearncloud.shop
          
          **Pipeline:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()
      
    - name: Email Notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "DevSecOps Pipeline ${{ steps.status.outputs.status }} - ${{ github.repository }}"
        to: ${{ secrets.EMAIL_TO }}
        from: DevSecOps Pipeline <${{ secrets.EMAIL_USERNAME }}>
        html_body: |
          <h2>${{ steps.status.outputs.emoji }} DevSecOps Pipeline ${{ steps.status.outputs.status }}</h2>
          
          <p><strong>Repository:</strong> ${{ github.repository }}</p>
          <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
          <p><strong>Commit:</strong> ${{ github.sha }}</p>
          <p><strong>Author:</strong> ${{ github.actor }}</p>
          <p><strong>Status:</strong> ${{ steps.status.outputs.message }}</p>
          
          <h3>Access Links:</h3>
          <ul>
            <li><a href="https://app.mylearncloud.shop">Application</a></li>
            <li><a href="https://grafana.mylearncloud.shop">Grafana Dashboard</a></li>
            <li><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">Pipeline Details</a></li>
          </ul>
          
          <p><em>Automated DevSecOps Pipeline Notification</em></p>
      if: always()