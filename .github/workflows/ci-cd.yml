name: 3-Tier DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/backend
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frontend

jobs:
  frontend-compilation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
    - name: Frontend Compilation Check
      run: |
        cd client
        find . -name "*.js" -exec node --check {} +

  backend-compilation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
    - name: Backend Compilation Check
      run: |
        cd api
        find . -name "*.js" -exec node --check {} +

  gitleaks-scan:
    runs-on: ubuntu-latest
    needs: [frontend-compilation, backend-compilation]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: GitLeaks Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  sonarqube-analysis:
    runs-on: ubuntu-latest
    needs: gitleaks-scan
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.3.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        projectBaseDir: .
        args: >
          -Dsonar.projectKey=NodeJS-Project
          -Dsonar.projectName=NodeJS-Project

  quality-gate-check:
    runs-on: ubuntu-latest
    needs: sonarqube-analysis
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: SonarQube Quality Gate Check
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  trivy-fs-scan:
    runs-on: ubuntu-latest
    needs: quality-gate-check
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        output: 'fs-report.html'
    - name: Upload Trivy scan results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-fs-report
        path: fs-report.html

  build-tag-push-backend:
    runs-on: ubuntu-latest
    needs: trivy-fs-scan
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: true
        tags: ${{ env.BACKEND_IMAGE }}:latest,${{ env.BACKEND_IMAGE }}:${{ github.sha }}

  build-tag-push-frontend:
    runs-on: ubuntu-latest
    needs: trivy-fs-scan
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        push: true
        tags: ${{ env.FRONTEND_IMAGE }}:latest,${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

  trivy-image-scan:
    runs-on: ubuntu-latest
    needs: [build-tag-push-backend, build-tag-push-frontend]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Run Trivy scan on Backend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.BACKEND_IMAGE }}:latest
        format: 'table'
        output: 'backend-image-report.html'
    - name: Run Trivy scan on Frontend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.FRONTEND_IMAGE }}:latest
        format: 'table'
        output: 'frontend-image-report.html'
    - name: Upload Trivy image scan results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-image-reports
        path: |
          backend-image-report.html
          frontend-image-report.html

  deploy-production:
    runs-on: ubuntu-latest
    needs: trivy-image-scan
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name uche-cluster --region eu-north-1
      
    - name: Verify Kubernetes access
      run: |
        kubectl get nodes
        kubectl get namespaces
        
    - name: Deploy to Production
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace prod --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy storage first
        kubectl apply -f k8s-prod/storage.yaml
        
        # Deploy applications
        kubectl apply -f k8s-prod/mysql.yaml
        kubectl apply -f k8s-prod/backend.yaml
        kubectl apply -f k8s-prod/frontend.yaml
        kubectl apply -f k8s-prod/ingress.yaml
        sleep 30
        
    - name: Verify Deployment
      run: |
        # Show what was deployed
        kubectl get pods,svc,ingress -n prod
        
        # Show access URL
        echo "\nAccess your app at:"
        kubectl get ingress -n prod -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' && echo "/" || echo "ALB hostname pending..."
        
        echo "\nDeployment complete! âœ…"