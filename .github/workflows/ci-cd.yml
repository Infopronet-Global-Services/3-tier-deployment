name: 3-Tier DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/backend
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frontend

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        
    - name: Frontend Compilation Check
      run: |
        cd client
        find . -name "*.js" -exec node --check {} +
        
    - name: Backend Compilation Check
      run: |
        cd api
        find . -name "*.js" -exec node --check {} +

  security-scan:
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: GitLeaks Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        output: 'fs-report.html'
        
    - name: Upload Trivy scan results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-fs-report
        path: fs-report.html

  sonarqube:
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.3.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        projectBaseDir: .
        args: >
          -Dsonar.projectKey=NodeJS-Project
          -Dsonar.projectName=NodeJS-Project

  build-and-push:
    runs-on: ubuntu-latest
    needs: sonarqube
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        
    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: true
        tags: ${{ env.BACKEND_IMAGE }}:latest,${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        
    - name: Run Trivy scan on Backend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.BACKEND_IMAGE }}:latest
        format: 'table'
        output: 'backend-image-report.html'
        
    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        push: true
        tags: ${{ env.FRONTEND_IMAGE }}:latest,${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        
    - name: Run Trivy scan on Frontend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.FRONTEND_IMAGE }}:latest
        format: 'table'
        output: 'frontend-image-report.html'
        
    - name: Upload Trivy image scan results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-image-reports
        path: |
          backend-image-report.html
          frontend-image-report.html

  deploy-production:
    runs-on: self-hosted
    needs: build-and-push 
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Verify Kubernetes access
      run: |
        kubectl get nodes
        kubectl get namespaces
        
    - name: Deploy to Production
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace prod --dry-run=client -o yaml | kubectl apply -f -
        
        # Install nginx ingress controller if not exists
        if ! kubectl get deployment ingress-nginx-controller -n ingress-nginx &> /dev/null; then
          echo "Installing nginx ingress controller..."
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/baremetal/deploy.yaml
          echo "Waiting for ingress controller to be ready..."
          kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=300s
        fi
        
        # Deploy applications
        kubectl apply -f k8s-prod/sc.yaml
        sleep 20
        kubectl apply -f k8s-prod/mysql.yaml -n prod
        kubectl apply -f k8s-prod/backend.yaml -n prod
        kubectl apply -f k8s-prod/frontend.yaml -n prod
        kubectl apply -f k8s-prod/ingress.yaml -n prod
        sleep 30
        
    - name: Verify Deployment
      run: |
        kubectl get pods -n prod
        kubectl get services -n prod
        kubectl get ingress -n prod
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=mysql -n prod --timeout=300s
        kubectl wait --for=condition=ready pod -l app=backend -n prod --timeout=300s
        kubectl wait --for=condition=ready pod -l app=frontend -n prod --timeout=300s