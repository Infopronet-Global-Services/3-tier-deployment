---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: mysql-secrets-provider
  namespace: prod
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "prod/mysql/credentials"
        objectType: "secretsmanager"
        jmesPath:
          - path: "MYSQL_ROOT_PASSWORD"
            objectAlias: "MYSQL_ROOT_PASSWORD"
          - path: "MYSQL_DATABASE"
            objectAlias: "MYSQL_DATABASE"
          - path: "JWT_SECRET"
            objectAlias: "JWT_SECRET"
  secretObjects:
  - secretName: mysql-secret-from-aws
    type: Opaque
    data:
    - objectName: "MYSQL_ROOT_PASSWORD"
      key: "MYSQL_ROOT_PASSWORD"
    - objectName: "MYSQL_DATABASE"
      key: "MYSQL_DATABASE"
    - objectName: "JWT_SECRET"
      key: "JWT_SECRET"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
  namespace: prod
  labels:
    app: mysql
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS crud_app;

    USE crud_app;

    CREATE TABLE IF NOT EXISTS users (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(255) NOT NULL,
      email VARCHAR(255) NOT NULL UNIQUE,
      password VARCHAR(255) NOT NULL,
      role ENUM('admin', 'viewer') NOT NULL DEFAULT 'viewer',
      is_active TINYINT(1) DEFAULT 1,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: prod
  labels:
    app: mysql
spec:
  clusterIP: None
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: prod
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      serviceAccountName: mysql-secrets-sa
      containers:
        - name: mysql
          image: mysql:8
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret-from-aws
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-secret-from-aws
                  key: MYSQL_DATABASE
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
            - name: secrets-store
              mountPath: /mnt/secrets-store
              readOnly: true
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
        - name: initdb
          configMap:
            name: mysql-initdb-config
        - name: secrets-store
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: mysql-secrets-provider